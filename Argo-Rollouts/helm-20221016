###Add helm repo for argo-rollouts
helm repo add argo https://argoproj.github.io/argo-helm
helm show values argo/argo-rollouts > values.yaml

###Custom values.yaml
vim values.yaml

installCRDs: true
keepCRDs: true
clusterInstall: true
createClusterAggregateRoles: true
nameOverride:
fullnameOverride:
apiVersionOverrides:
kubeVersionOverride: ""
extraObjects: []
controller:
  component: rollouts-controller
  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: argo-rollouts
          app.kubernetes.io/name: argo-rollouts
          app.kubernetes.io/component: rollouts-controller
  terminationGracePeriodSeconds: 300
  priorityClassName: ""
  replicas: 2
  image:
    registry: quay.io
    repository: argoproj/argo-rollouts
    tag: ""
    pullPolicy: IfNotPresent
  extraArgs: []
  extraEnv: []
  extraContainers: []
  initContainers: []
  resources: {}
  createClusterRole: true
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      additionalLabels: {}
      additionalAnnotations: {}
  livenessProbe:
    httpGet:
      path: /healthz
      port: healthz
    initialDelaySeconds: 30
    periodSeconds: 20
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 10
  readinessProbe:
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 15
    periodSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 4
  pdb:
    labels: {}
    annotations: {}
    enabled: false
serviceAccount:
  create: true
  annotations: {}
  name: ""
crdAnnotations: {}
podAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
containerSecurityContext: {}
serviceAnnotations: {}
podLabels: {}
imagePullSecrets: []
dashboard:
  enabled: true
  readonly: false
  component: rollouts-dashboard
  nodeSelector: {}
  tolerations: []
  affinity: {}
  priorityClassName: ""
  createClusterRole: true
  replicas: 1
  image:
    registry: quay.io
    repository: argoproj/kubectl-argo-rollouts
    tag: ""
    pullPolicy: IfNotPresent
  extraArgs: []
  extraEnv: []
  resources: {}
  podSecurityContext:
    runAsNonRoot: true
  containerSecurityContext: {}
  service:
    type: ClusterIP
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    annotations: {}
    labels: {}
    portName: dashboard
    port: 3100
    targetPort: 3100
    nodePort:
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  pdb:
    labels: {}
    annotations: {}
    enabled: false
  ingress:
    enabled: true
    annotations:
      external-dns.alpha.kubernetes.io/hostname: testvn.click
      external-dns.alpha.kubernetes.io/target: 202.130.37.225
      external-dns.alpha.kubernetes.io/ttl: "3600"
      kubernetes.io/ingress.class: nginx
    labels: {}
    ingressClassName: ""
    hosts:
      - argorollouts.testvn.click
    paths:
      - /
    pathType: Prefix
    extraPaths: []
    tls:
      - secretName: testvn-click-tls
        hosts:
          - sonarqube.testvn.click
notifications:
  secret:
    create: false
    items: {}
  notifiers: {}
  templates: {}
  triggers: {}

###Create namespace
kubectl create ns hbc-argo-rollouts

###Deploy argo-rollouts
helm install argo-rollouts argo/argo-rollouts -n hbc-argo-rollouts -f values.yaml
