sudo yum install vim wget curl unzip -y

vim /etc/sysctl.conf
vm.max_map_count=524288
fs.file-max=131072

sudo sysctl --system

vim /etc/security/limits.conf
sonarqube   -   nofile   131072
sonarqube   -   nproc    8192


sudo useradd sonar
chage -M 99999 sonar

wget https://download.oracle.com/java/17/archive/jdk-17.0.6_linux-x64_bin.rpm


sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
sudo yum install -y postgresql14-server

https://download.postgresql.org/pub/repos/yum/14/redhat/rhel-7-x86_64/postgresql14-server-14.7-1PGDG.rhel7.x86_64.rpm

sudo /usr/pgsql-14/bin/postgresql-14-setup initdb
sudo systemctl enable postgresql-14
sudo systemctl start postgresql-14

vim /var/lib/pgsql/14/data/pg_hba.conf
 “peer” to “trust” and “idnet” to “md5“.

vim /var/lib/pgsql/14/data/postgresql.conf
listen_addresses = '*'

sudo systemctl restart postgresql-14

sudo su - postgres
psql 
postgres=# alter user postgres with password 'StrongPassword';
ALTER ROLE
postgres=# exit

createdb --template=template0 --locale=en_US.UTF-8 --encoding=UTF8 -U postgres symplcms
-bash-4.2$ createdb sonarqube
-bash-4.2$ psql
postgres=# CREATE USER sonarqube WITH PASSWORD 'StrongPassword';
postgres=# GRANT ALL PRIVILEGES ON DATABASE sonarqube to sonarqube;
postgres=#  \q

wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.0.65466.zip
unzip sonarqube-9.9.0.65466.zip
sudo mv sonarqube-*/  /opt/sonarqube
rm -rf sonarqube-9.9.0.65466.zip

sudo vim /opt/sonarqube/conf/sonar.properties
##Database details
sonar.jdbc.username=sonarqube
sonar.jdbc.password=StrongPassword
sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube

##How you will access SonarQube Web UI
sonar.web.host=0.0.0.0
sonar.web.port=9000

##Java options
sonar.web.javaOpts=-server -Xms512m -Xmx512m -XX:+HeapDumpOnOutOfMemoryError
sonar.search.javaOpts=-Xmx512m -Xms512m -XX:MaxDirectMemorySize=256m -XX:+HeapDumpOnOutOfMemoryError

##Also add the following Elasticsearch storage paths
sonar.path.data=/var/sonarqube/data
sonar.path.temp=/var/sonarqube/temp

sudo chown -R sonar:sonar /opt/sonarqube
sudo mkdir -p /var/sonarqube
sudo chown -R sonar:sonar /var/sonarqube

sudo vim /etc/systemd/system/sonarqube.service
[Unit]
Description=SonarQube service
After=syslog.target network.target

[Service]
Type=forking
ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop
LimitNOFILE=65536
LimitNPROC=4096
User=sonar
Group=sonar
Restart=on-failure

[Install]
WantedBy=multi-user.target

sudo systemctl daemon-reload
sudo systemctl enable --now sonarqube.service

admin / admin



yum install -y nginx
mkdir /etc/nginx/ssl

/etc/nginx/nginx.conf 

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    
        worker_connections  1024;
        multi_accept        on;
        use                 epoll;
        
}

http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                            '$status $body_bytes_sent "$http_referer" '
                                            '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        types_hash_max_size 2048;
        
        # Character set
        charset utf-8;

        # Required to prevent bypassing of DNS cache!!
        resolver 127.0.0.1 ipv6=off;
        
        # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
        reset_timedout_connection on;
        
        # Security Headers
        server_tokens off;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header "X-Permitted-Cross-Domain-Policies" "master-only";
        add_header "X-Download-Options" "noopen";
        
        # Buffers
        client_header_timeout 300;
        client_body_timeout 300;
        fastcgi_read_timeout 300;
        client_max_body_size 32m;
        fastcgi_buffers 8 128k;
        fastcgi_buffer_size 128k;

        # Compression
        gzip  on;
        gzip_vary on;
        gzip_comp_level 1;
        gzip_min_length 256;
        gzip_proxied expired no-cache no-store private auth;
        gzip_disable "MSIE [1-6]\.";
        gzip_types
          application/atom+xml
          application/javascript
          application/json
          application/ld+json
          application/manifest+json
          application/rss+xml
          application/vnd.geo+json
          application/vnd.ms-fontobject
          application/x-font-ttf
          application/x-web-app-manifest+json
          application/x-javascript
          application/xhtml+xml
          application/xml
          font/opentype
          image/bmp
          image/svg+xml
          image/x-icon
          text/cache-manifest
          text/css
          text/xml
          text/plain
          text/javascript
          text/vcard
          text/vnd.rim.location.xloc
          text/vtt
          text/x-component
          text/x-cross-domain-policy;
    
            
        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;

        # Load modular configuration files from the /etc/nginx/conf.d directory.
        # See http://nginx.org/en/docs/ngx_core_module.html#include
        # for more information.
        
        include /etc/nginx/conf.d/*.conf;

}


/etc/nginx/conf.d/sonar.conf 
server {
    
        listen                      80 default_server;
        server_name                 sonar.example.local;
        return 301                  https://$server_name$request_uri;

}

server {

        listen                      443 ssl http2 default_server;
        server_name                 sonar.example.local;

        client_max_body_size        32M;

        ssl_certificate             /etc/nginx/ssl/tls.crt;
        ssl_certificate_key         /etc/nginx/ssl/tls.key;
        
        # openssl dhparam -out /etc/nginx/ssl/dhparams.pem 2048
        ssl_dhparam                 /etc/nginx/ssl/dhparams.pem;

        ssl_prefer_server_ciphers   on;
        ssl_session_timeout         10m;
        ssl_session_cache           builtin:1000  shared:SSL:10m;
        ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers                 EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
        
        access_log                  off;
        error_log                   /var/log/nginx/sonar.error;
            
        location / {

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_set_header        X-Forwarded-Ssl on;
            proxy_read_timeout      300;

            # Redirect to Sonar
            proxy_pass              http://127.0.0.1:9000;
            
            # Fix the “It appears that your reverse proxy set up is broken" error.
            proxy_redirect          http://127.0.0.1:9000 $scheme://$host;

        }

}
