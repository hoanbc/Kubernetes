###Gitlab Tokens
Account -> User Settings -> Access Tokens -> 
Token name: gitlab-tokens
Expiration date: DD-MM-YY
Select scopes: api
-> Create personal access token -> Save token(*1)

###SonarQube Tokens
My Account -> Security -> Generate Tokens
Name: sonarqube-tokens
Type: Global Analysis Token
Expires in: DD/MM/YY
-> Generate (*2)

###Gitlab project Tokens
Project -> Settings -> Repository -> Deploy tokens ->
Name: scan-code-project-token
Scope: read_repository | read_registry
-> Create deploy token -> Copy username:gitlab+deploy-token-xxx (*3) -> Copy token: xxxx (*4)

###Jenkins token
Jenkins Admin -> Configure -> API Token -> Current token(s) -> Add new tokens -> Name: gitlab-webhook -> Generate -Save jenkins-token(*5)

###Gitlab project webhook
Project -> Settings -> Webhooks -> URL: https://admin:jenkins-token(*5)@jenkins.testvn.click/project/scan-code
Secret token: 
Trigger: Push events

###SonarQube project token
SonarQube -> Project -> Project name:scan-code -> Project Information -> Project Key -> hoanbc_scan-code_XXX(*6)

###Gitlab file
- sonar-project.properties
sonar.projectKey=hoanbc_scan-code_XXX(*6)

- Jenkinsfile
node {
  stage('SCM') {
    checkout scm
  }
  stage('SonarQube Analysis') {
    def scannerHome = tool 'sonarqubescanner(*7)';
    withSonarQubeEnv() {
      sh "${scannerHome}/bin/sonar-scanner"
    }
  }
}

###DevOps Platform Integrations in SonarQube
SonarQube -> Administrator -> Configuration -> DevOps Platform Integrations -> Gitlab ->
Configuration name: Gitlab
GitLab API URL: https://gitlab.com/api/v4
Personal Access Token: gitlab-tokens(*1)
-> Save configuration

###Install plugin on Jenkins
Jenkins -> Manage Jenkins -> Manage Plugins -> Available -> GitLab Plugin | SonarQube Scanner for Jenkins -> Download now and install after restart

###Jenkins setting basic Configure System
Jenkins Location:
- Jenkins URL: https://jenkins.testvn.click/
- System Admin e-mail address: devops@testvn.click
SonarQube servers:
- SonarQube installations
  - Name: sonarqube
  - Server URL: https://sonar.testvn.click/
  - Server authentication token: Add -> Secret text -> sonarqube-tokens(*2)
 Gitlab:
 - Connection name: Gitlab
 - Gitlab host URL: https://gitlab.com
 - Credentials: Add -> Kind: Gitlab API token -> API token: gitlab-tokens (*1) -> Add 
 -> Save
 
###Jenkins setting basic Global Tool Configuration
 SonarQube Scanner
 - SonarQube Scanner installations
    - SonarQubeScanner Name: sonarqubescanner(*7 -> Install automatically -> Install from Maven Central -> SonarQube Scanner -> Save
    
###Jenkins build job
Dashboad -> New item -> Name: scan-code -> Pipeline -> Ok
- Build Triggers: Build when a change is pushed to GitLab. GitLab webhook URL: https://jenkins.testvn.click/project/scan-code
    - Push Events
    - Opened Merge Request Events
- Pipeline
  Definition: Pipeline script from SCM
  SCM: Git
  Repositories: 
    - Repository URL: https://gitlab.com/hoanbc/scan-code.git
    - Credentials: Add -> Kind: Username with password -> Username (*3) -> Password (*4) -> Add
- Script Path
  Jenkinsfile
  

  
  
