###Install repo helm
helm repo add jetstack https://charts.jetstack.io
helm show values jetstack/cert-manager > value.yaml

###Create namespaces
kubectl create ns hbc-cert-manager

###Edit config
vim value.yaml
global:
  imagePullSecrets: []
  priorityClassName: ""
  rbac:
    create: true
    aggregateClusterRoles: true
  podSecurityPolicy:
    enabled: false
    useAppArmor: true
  logLevel: 2
  leaderElection:
    namespace: "kube-system"
installCRDs: false
replicaCount: 1
strategy: {}
featureGates: ""
image:
  repository: quay.io/jetstack/cert-manager-controller
  pullPolicy: IfNotPresent
clusterResourceNamespace: ""
namespace: ""
serviceAccount:
  create: true
  automountServiceAccountToken: true
extraArgs: []
extraEnv: []
resources: {}
securityContext:
  runAsNonRoot: true
containerSecurityContext:
  allowPrivilegeEscalation: false
volumes: []
volumeMounts: []
podLabels: {}
podDnsPolicy: "None"
podDnsConfig:
  nameservers:
    - "1.1.1.1"
    - "8.8.8.8"
nodeSelector:
  kubernetes.io/os: linux
ingressShim: {}
prometheus:
  enabled: true
  servicemonitor:
    enabled: false
    prometheusInstance: default
    targetPort: 9402
    path: /metrics
    interval: 60s
    scrapeTimeout: 30s
    labels: {}
    honorLabels: false
affinity: {}
tolerations: []
webhook:
  replicaCount: 1
  timeoutSeconds: 10
  config:
  strategy: {}
  securityContext:
    runAsNonRoot: true
  containerSecurityContext:
    allowPrivilegeEscalation: false
  extraArgs: []
  resources: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  nodeSelector:
    kubernetes.io/os: linux
  affinity: {}
  tolerations: []
  podLabels: {}
  serviceLabels: {}
  image:
    repository: quay.io/jetstack/cert-manager-webhook
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
    automountServiceAccountToken: true
  securePort: 10250
  hostNetwork: false
  serviceType: ClusterIP
  url: {}
cainjector:
  enabled: true
  replicaCount: 1
  strategy: {}
  securityContext:
    runAsNonRoot: true
  containerSecurityContext:
    allowPrivilegeEscalation: false
  extraArgs: []
  resources: {}
  nodeSelector:
    kubernetes.io/os: linux
  affinity: {}
  tolerations: []
  podLabels: {}
  image:
    repository: quay.io/jetstack/cert-manager-cainjector
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
    automountServiceAccountToken: true
startupapicheck:
  enabled: true
  securityContext:
    runAsNonRoot: true
  containerSecurityContext:
    allowPrivilegeEscalation: false
  timeout: 1m
  backoffLimit: 4
  jobAnnotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  extraArgs: []
  resources: {}
  nodeSelector:
    kubernetes.io/os: linux
  affinity: {}
  tolerations: []
  podLabels: {}
  image:
    repository: quay.io/jetstack/cert-manager-ctl
    pullPolicy: IfNotPresent
  rbac:
    annotations:
      helm.sh/hook: post-install
      helm.sh/hook-weight: "-5"
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  serviceAccount:
    create: true
    annotations:
      helm.sh/hook: post-install
      helm.sh/hook-weight: "-5"
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    automountServiceAccountToken: true

###Deploy helm
helm upgrade cert-manager jetstack/cert-manager --namespace hbc-cert-manager --set installCRDs=true -f value.yaml

###Deploy clusterissuer-acme
vim clusterissuer-acme.yml 
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: acme-issuer
  namespace: hbc-cert-manager
spec:
  acme:
    email: hoanbc@outlook.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-issuer-account-key
    solvers:
    - selector: {}
      http01:
        ingress:
          class: nginx

kubectl apply -f clusterissuer-acme.yml 

###Deploy cert
vim cert.yaml 
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nginx-tls
  namespace: nginx-test
spec:
  secretName: nginx-tls
  issuerRef:
    name: acme-issuer
    kind: ClusterIssuer
  commonName: nginx.testvn.click
  dnsNames:
  - nginx.testvn.click

kubectl apply -f cert.yaml

###Deploy ingress
vim ingress.yaml
cat ingress.yaml 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: testvn.click
    external-dns.alpha.kubernetes.io/ttl: "120"
    kubernetes.io/ingress.class: nginx
  name: nginx-ingress
  namespace: nginx-test
spec:
  rules:
  - host: nginx.testvn.click
    http:
      paths:
      - backend:
          service:
            name: nginx
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - nginx.testvn.click
    secretName: nginx-tls

kubectl apply -f ingress.yaml



###Use cloudflare api-key
vim secret-cloudflare.yml 
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-key-secret
  namespace: hbc-cert-manager
type: Opaque
stringData:
  api-key: bdb201d90c6c194111122515978c0cfc1dd

kubectl apply -f secret-cloudflare.yml 

vim clusterissuer-acme.yml 
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: acme-issuer
  namespace: hbc-cert-manager
spec:
  acme:
    email: hoanbc@outlook.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: example-issuer-account-key
    solvers:
    - dns01:
        cloudflare:
          email: hoanbc@outlook.com
          apiKeySecretRef:
            name: cloudflare-api-key-secret
            key: api-key

kubectl apply -f clusterissuer-acme.yml 

vim cert.yaml 
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nginx1
  namespace: nginx-test
spec:
  secretName: nginx1
  issuerRef:
    name: acme-issuer
    kind: ClusterIssuer
  dnsNames:
  - nginx1.testvn.click

kubectl apply -f cert.yaml 



###Use cloudflare api-token
vim api-token.yaml 
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-token-secret
  namespace: hbc-cert-manager
type: Opaque
stringData:
  api-token: Xx7n1VKd-h1QUrf11111gckZ8ew6qaidJdl0dTh

vim clusterissuer-acme-apitoken.yml 
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: acme-issuer
  namespace: hbc-cert-manager
spec:
  acme:
    email: hoanbc@outlook.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-issuer-account-key
    solvers:
    - dns01:
        cloudflare:
          email: hoanbc@outlook.com
          apiTokenSecretRef:
            name: cloudflare-api-token-secret
            key: api-token 
 
vim requestcert.yaml      
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: testvn-click-tls
  namespace: hbc-cert-manager
spec:
  secretName: testvn-click-tls
  secretTemplate:
    annotations:
      kubed.appscode.com/sync: "cert-manager-tls=testvn-click"
  issuerRef:
    name: acme-issuer
    kind: ClusterIssuer
  #commonName: '*.testvn.click'
  dnsNames:
  - '*.testvn.click'
